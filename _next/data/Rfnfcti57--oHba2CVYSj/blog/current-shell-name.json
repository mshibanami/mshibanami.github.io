{"pageProps":{"item":{"id":"current-shell-name","contentHtml":"<h2>まえがき</h2>\n<p>去年の12月、Facebookの<a href=\"https://github.com/facebook/infer\">Infer</a>がHomebrewに追加されたことを知った。</p>\n<p><a href=\"https://github.com/Homebrew/homebrew/commits/master/Library/Formula/infer.rb\">https://github.com/Homebrew/homebrew/commits/master/Library/Formula/infer.rb</a></p>\n<p>InferはOCamlで書かれているが、そのバージョン指定が厳しくてHomebrewになかなか出せないとかいう話があった。</p>\n<p>Facebookは最初、ビルド済みのバイナリを公開してくれていて、Homebrew-caskの方ではそれが使われていた。\nHomebrewでも同じくバイナリを使ったサポートをしようとしてたけど、バイナリがいつの間にか消されててできなくなっていた。</p>\n<p><a href=\"https://github.com/Homebrew/homebrew/pull/40597\">https://github.com/Homebrew/homebrew/pull/40597</a></p>\n<p>その時自分は、じゃあ自分でビルドしようと思い、OCamlを入れてみた。</p>\n<p>opamの起動スクリプトは各シェル用のものがあった。\n何もしてないとインストール時にその読み込み設定がログインシェルの.*shrcに書かれる。\n自分の場合は.zshrcに以下が書かれた。</p>\n<div><pre><code><span>.</span> /Users/ユーザー名/.opam/opam-init/init.zsh <span>></span> /dev/null <span><span>2</span>></span> /dev/null <span>||</span> <span>true</span>\n</code></pre></div>\n<p>また、<code>~/.opam/opam-init/</code>には他にも</p>\n<ul>\n<li>init.fish</li>\n<li>init.sh</li>\n<li>init.zsh</li>\n<li>init.csh</li>\n</ul>\n<p>があった。(bashはない。)\n各シェルの.*shrcにこれらを書いてもいいけど設定が分散するのは嫌だ。\nなので実行中のシェル名を見てこれらを分ける処理を共通の.shrcに書きたい。\nそこで現在実行中のシェル名が欲しくなった。</p>\n<h2>案1: <code>echo $0</code></h2>\n<ul>\n<li>実行中スクリプトのパス。</li>\n<li>シェル名が表示されるのはシェルと対話中の時だけ</li>\n<li>fish-shellやcsh、tcshでは$0は設定されてない</li>\n</ul>\n<h2>案2: <code>ps -p $$ -oargs= | sed -e 's:^.*/::g'</code></h2>\n<h3>内訳</h3>\n<ul>\n<li>\n<p>$$は現在のプロセス名</p>\n</li>\n<li>\n<p>sedで不要な出力を無文字に置換で削除</p>\n<p>sedでは普通、<code>s/パターン/置換文字/m</code>のようにスラッシュ区切りで使われるが、今回扱う文字にはパスが含まれる為<code>:</code>を使う。\nこの場合は一番下の行の最初から一番最後のスラッシュまでを削除する。</p>\n</li>\n<li>\n<p>oargsはocommとすることも出来る</p>\n</li>\n</ul>\n<h3>問題点</h3>\n<ul>\n<li>$$はfish-shellでは使えない</li>\n<li>csh や tcsh ではプロセス名がそれぞれ <code>-sh</code> と <code>-csh</code> となり、先頭の文字が消されてしまう。\nハイフンが付いてるだけならまだしも、全く別のシェルとして表示されるのは困る。おそらくバグ。\n<code>-</code>を<code>t</code>に置換すれば可能だがそういう場当たり的対処は後で修正された時が面倒。</li>\n</ul>\n<h2>案3: <code>ps -p %self -oargs= | sed -e 's:^.*/::g'</code></h2>\n<ul>\n<li><code>%self</code>はfish-shellでしか使えない</li>\n</ul>\n<h2>案4: <code>echo $SHELL | sed -e 's:^.*/::g'</code></h2>\n<ul>\n<li>cshやtcshでは使えない</li>\n<li>シェルのネストに対応できない</li>\n</ul>\n<h2>案5: <code>echo $shell</code></h2>\n<ul>\n<li>cshやtcsh以外では使えない</li>\n<li>cshでもtcshになる。OSXの/bin/cshは/bin/tcshを呼び出してるので当然だが。</li>\n</ul>\n<p>以上から、1つのコードでsh、bash、zsh、fish、csh、tcshシェルを判定したい。\nしかしcsh系とその他では以下if文とエラー出力の無視という点が他と異なるので無理と判断。\ncshとtcshは諦めた。sh、bash、zshでこんな感じにして妥協しようか。</p>\n<div><pre><code><span>shellName</span><span>=</span><span><span>$(</span><span>ps</span> <span>-p</span> $$ <span>-oargs</span><span>=</span> <span><span>2</span>></span> /dev/null<span>)</span></span>\n<span>if</span> <span>[</span> <span>-z</span> <span>\"<span>$shellName</span>\"</span> <span>]</span><span>;</span> <span>then</span><span>;</span>\n  <span>shellName</span><span>=</span><span><span>$(</span><span>ps</span> <span>-p</span> %self <span>-oargs</span><span>=</span><span>)</span></span> <span>#fish-shell用</span>\n<span>fi</span>\n<span>shellName</span><span>=</span><span><span>$(</span><span>echo</span> $shellName <span>|</span> <span>sed</span> <span>-e</span> <span>'s:^.*/::g'</span><span>)</span></span>\n\n<span>echo</span> <span>\"シェル名: <span>$shellName</span>\"</span>\n</code></pre></div>\n<p>なんか小汚いしどうでも良くなってきた。今は<code>.*shrc</code>へそれぞれ書いてる。でも何か方法は無いだろうか。</p>\n<p>参考:</p>\n<ul>\n<li><a href=\"http://stackoverflow.com/questions/3327013/how-to-determine-the-current-shell-im-working-on\">http://stackoverflow.com/questions/3327013/how-to-determine-the-current-shell-im-working-on</a></li>\n</ul>\n","textFormat":0,"sourceFileAbsolutePath":"/Users/runner/work/website/website/blog/current-shell-name.md","outputPath":"blog/current-shell-name","title":"実行中のシェル名の確認方法を考える","createdAt":"2016-02-02","language":"ja"}},"__N_SSG":true}